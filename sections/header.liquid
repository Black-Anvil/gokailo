{% if template.directory == "customers" or template == null or template == "404" %}
    {% assign mode = "dark" %}
{% endif %}

<div class="header-top {{ mode }}">
    <div class="container">
        <nav>
            <ul class="header-top__navigation">
                <li>
                    <a class="header-top__logo" href="{{ routes.root_url }}">
                        Kailo
                        <span class="header-top__logo-light">{{ "logo-light.png" | asset_url | img_tag }}</span>
                        <span class="header-top__logo-dark">{{ "logo-dark.png" | asset_url | img_tag }}</span>
                    </a>
                </li>
                <li><a class="h6-title" href="#">shop</a></li>
                <li><a class="h6-title" href="#">about kailo</a></li>
                <li><a class="h6-title" href="#">trust kailo</a></li>
            </ul>

            <ul class="header-top__icons">
                <li>
                    <a href="#">
                        Favorite
                        {% render "icon-favorite" %}
                    </a>
                </li>

                <li>
                    <a href="{{ routes.search_url }}">
                        Search
                        {% render "icon-search" %}
                    </a>
                </li>

                <li>
                    <a href="{{ routes.account_url }}">
                        User
                        {% render "icon-user" %}
                    </a>
                </li>

                <li>
                    <a href="{{ routes.cart_url }}" type="button" class="cart-drawer-opener">
                        Shopping Bag
                        {% render "icon-cart" %}

                        <span class="cart-counter">{{ cart.item_count }}</span>
                    </a>
                </li>
            </ul>
        </nav>
    </div>

    <div class="header-top__search">
        <div class="container">
            <form action="/search">
                <label>
                    {% render "icon-search" %}
                    <input placeholder="Search" type="text">

                    <span class="header-top__search-btn-clear">
                        clear
                        {% render "icon-close" %}
                    </span>
                </label>

                <div class="predictive-search">
                    <div class="predictive-search__wrapper"></div>

                    <a href="/search?q=" class="predictive-search__link">
                        <span>Search for ""</span>
                        {% render "icon-chevron" %}
                    </a>
                </div>
            </form>

            <button class="header-top__search-btn-close">
                close
                {% render "icon-close" %}
            </button>
        </div>
    </div>
</div>

<script type="module">
    const headerTop = document.querySelector(".header-top");

    window.addEventListener('scroll', () => {
        if (document.documentElement.scrollTop > 0) {
            headerTop.classList.add("scrolling");
        } else {
            headerTop.classList.remove("scrolling");
        }
    });

    const searchLink = headerTop.querySelector("a[href='/search']");
    const search = headerTop.querySelector(".header-top__search");
    const searchBtnClose = headerTop.querySelector(".header-top__search-btn-close");
    const searchBtnClear = headerTop.querySelector(".header-top__search-btn-clear");

    const searchForm = search.querySelector("form[action='/search']");
    const searchInput = search.querySelector("input");
    const predictiveSearch = search.querySelector(".predictive-search");
    const searchWrapper = predictiveSearch.querySelector(".predictive-search__wrapper");

    const clearPredictiveSearch = () => {
        predictiveSearch.classList.remove("opened");
        searchWrapper.innerHTML = "";
        searchInput.value = "";
    };

    searchLink.addEventListener("click", (e) => {
        e.preventDefault();

        search.classList.add("opened");
        document.body.classList.add("overlay");
    });

    searchBtnClear.addEventListener("click", () => {
        clearPredictiveSearch();
    });

    searchBtnClose.addEventListener("click", () => {
        search.classList.remove("opened");
        clearPredictiveSearch();
        document.body.classList.remove("overlay");
    });

    searchForm.addEventListener("submit", async (e) => {
        e.preventDefault();

        searchWrapper.innerHTML = "";

        const res = await fetch(`/search/suggest.json?q=${searchInput.value}&resources[type]=collection,product,article`);

        const html = await res.json();

        const {products, collections, articles} = html.resources.results;

        const convertData = (originalTime) => {
            const dateObj = new Date(originalTime);
            return dateObj.toLocaleDateString('en-US', {month: 'long', day: 'numeric', year: 'numeric'});
        };

        const createColumn = (string) => {
            return string ? `<div class="predictive-search__column">
                ${string}
            </div>`: "";
        };

        const createSearchProducts = ({title, items}) => {
            return items.length ? `
                <div class="predictive-search__row">
                    <h6 class="h6-title predictive-search__title">${title}</h6>

                    <ul class="predictive-search__list">
                        ${items.map(item => {
                return `
                                <li>
                                    <a href="${item.url}">
                                        <img src="${item.image}" alt="${item.title}">

                                        <div>
                                            <p>${item.title}</p>
                                            <span>${"$" + item.price}</span>
                                        </div>
                                    </a>
                                </li>
                            `;
            }).join("")}
                    </ul>
                </div>
            ` : "";
        };

        const createSearchCollections = ({title, items}) => {
            return items.length ? `
                <div class="predictive-search__row">
                    <h6 class="h6-title predictive-search__title">${title}</h6>

                    <ul class="predictive-search__list">
                        ${items.map(item => {
                return `
                                <li>
                                    <a href="${item.url}">
                                        <img src="${item.featured_image.url}" alt="${item.title}">

                                        <div>
                                            <p>${item.title}</p>
                                        </div>
                                    </a>
                                </li>
                            `;
            }).join("")}
                    </ul>
                </div>
            ` : "";
        };

        const createSearchArticles = ({title, items}) => {
            return items.length ? `
                <div class="predictive-search__row">
                    <h6 class="h6-title predictive-search__title">${title}</h6>

                    <ul class="predictive-search__list">
                        ${items.map(item => {
                        return `
                                <li>
                                    <a href="${item.url}">
                                        <img src="${item.featured_image.url}" alt="${item.title}">

                                        <div>
                                            <p>${item.title}</p>
                                            <p class="predictive-search__article-published">
                                                <span>By ${item.author}</span>
                                                <span">${convertData(item.published_at)}</span>
                                            </p>
                                        </div>
                                    </a>
                                </li>
                            `;
                        }).join("")}
                    </ul>
                </div>
            ` : "";
        };

        const productsBlock = createSearchProducts({title: "Products", items: products});
        const collectionsBlock = createSearchCollections({title: "Collections", items: collections});
        const articlesBlock = createSearchArticles({title: "Articles", items: articles});


        const createResults = (string) => {
          return `<div class="predictive-search__results">${string}</div>`;
        };

        const columnFirst = createColumn(productsBlock + collectionsBlock);
        const columnSecond = createColumn(articlesBlock);

        searchWrapper.innerHTML = createResults(columnFirst + columnSecond);
        predictiveSearch.classList.add("opened");
    });
</script>
